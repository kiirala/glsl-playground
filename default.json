{
  "vertex": "#version 100\nprecision highp float;\nattribute vec2 inCoord;\nvarying vec2 position;\nuniform vec2 windowSize;\n\nvoid main() {\n  position = inCoord * windowSize / max(windowSize.x, windowSize.y);\n  gl_Position = vec4(inCoord, 0.0, 1.0);\n}\n",
  "fragment": "#version 100\nprecision highp float;\n \nfloat hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n        res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n\n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n\n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n\n        float f1 = 2.0 * hsl.z - f2;\n\n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }\n    return rgb;\n}\n\nvarying vec2 position;\nuniform float time;\nuniform sampler2D texture0;\n\nvoid main() {\n  vec2 pos = position + vec2(0.0, sin(time)*0.2);\n  float angle = atan(pos.y, pos.x)/3.14159/2.0*10.0 + sin(time*.2)*5.0;\n  float dist = length(position) + sin(time/3.0);\n  float hue = dist * 2.0 + sin(angle*3.1415*3.0/5.0);\n  gl_FragColor = vec4(\n    hsl2rgb(\n      vec3(fract(hue),\n          0.75,\n          sin(hue*2.0)/2.5+0.5)),\n    1.0);\n}\n",
  "textures": [
    "img/tkoaly.png"
  ]
}